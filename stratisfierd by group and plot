
library(tidyverse)
library(metafor)
library(broom)
library(dplyr)
library(purrr)
library(broom)
library(ggplot2)
library(metafor)
library(Matrix)

# Set working directory and load data
setwd("/Users/laurahurn/Desktop/LSE/diss/replication_archive/output/processed_data")
df_responses2020 <- readRDS("responses.rds") %>% filter(dataset_year == "2020")
df_tags2020 <- readRDS("tagging_2020.rds")

# Recode ethnicity into broader race categories
df_responses2020 <- df_responses2020 %>%
  mutate(race_group = case_when(
    ethnicity == "white" ~ "white",
    ethnicity == "hispanic" ~ "hispanic-latino",
    ethnicity == "black" ~ "black",
    ethnicity == "asian" ~ "asian",
    TRUE ~ "mixed-other"
  ))

# Filter out missing race data
df_filtered <- df_responses2020 %>%
  filter(!is.na(race_group))

# Get unique race groups
race_groups <- unique(df_filtered$race_group)

# Initialize lists for estimates and covariance matrices
tidied_by_race <- list()
vcov_by_race <- list()

# Loop through each race group
for (group in race_groups) {
  message("Processing: ", group)
  
  df_group <- df_filtered %>%
    filter(race_group == group)
  
  list_study_ids_group <- unique(df_group$study_id)
  
  df_sample_group <- df_group %>%
    filter(study_id %in% list_study_ids_group) %>%
    select(study_id, dataset_year, treat, content_id, favorability, votechoice)
  
  df_sample_combined <- df_sample_group %>%
    mutate(
      combined_outcome = case_when(
        !is.na(favorability) & !is.na(votechoice) ~ (favorability + votechoice) / 2,
        !is.na(favorability) ~ favorability,
        !is.na(votechoice) ~ votechoice,
        TRUE ~ NA_real_
      )
    )
  
  out_loop <- map(list_study_ids_group, function(.x) {
    df_study <- df_sample_combined %>% filter(study_id == .x)
    if (nrow(df_study) == 0) return(NULL)
    
    lm_fit <- lm(combined_outcome ~ factor(content_id), data = df_study)
    tidied <- tidy(lm_fit) %>% filter(term != "(Intercept)")
    vcov_mat <- vcov(lm_fit)
    vcov_mat <- vcov_mat[rownames(vcov_mat) != "(Intercept)", colnames(vcov_mat) != "(Intercept)"]
    
    list("tidied_estimates" = tidied, "vcov_matrix" = vcov_mat)
  })
  
  out_loop <- compact(out_loop)
  
  tidied_by_race[[group]] <- map_dfr(out_loop, function(x) x$tidied_estimates) %>%
    mutate(race_group = group)
  
  vcov_by_race[[group]] <- map(out_loop, function(x) x$vcov_matrix)
}

# Combine all estimates and add content tag info


lm_estimates_race <- bind_rows(tidied_by_race) %>%
  mutate(
    content_id = gsub("factor\\(content_id\\)", "", term),  # Clean term names
    race_group = factor(race_group, levels = c("white", "hispanic-latino", "black", "asian", "mixed-other"))  # Set factor levels
  ) %>%
  left_join(df_tags2020, by = "content_id")  # Merge with tags dataset




# Combine all variance-covariance matrices
final_vcov_matrix <- do.call(bdiag, unlist(vcov_by_race, recursive = FALSE))

# Sanity checks
stopifnot(isSymmetric(final_vcov_matrix))
computed_se <- sqrt(diag(final_vcov_matrix)) %>% unname()
expected_se <- lm_estimates_race$std.error %>% unname()
stopifnot(all.equal(computed_se, expected_se, tolerance = 1e-8))



##### 1. immigration
meta_fit_race_immigration_interaction <- rma.mv(
  yi = estimate,
  V = final_vcov_matrix,
  mods = ~ issue_immigrant * race_group,
  data = lm_estimates_race
)
summary(meta_fit_race_immigration_interaction)




# Extract coefficients and variance-covariance matrix
coefs <- coef(meta_fit_race_immigration_interaction)
vcov_mat <- vcov(meta_fit_race_immigration_interaction)

# Define scenarios to predict
pred_df <- expand.grid(
  issue_immigrant = c(0, 1),
  race_group = c("white", "black", "asian", "mixed-other")
)

# Manually compute predictions and standard errors
pred_df <- pred_df %>%
  rowwise() %>%
  mutate(
    estimate = {
      x <- c(
        1,
        issue_immigrant,
        as.numeric(race_group == "black"),
        as.numeric(race_group == "asian"),
        as.numeric(race_group == "mixed-other"),
        issue_immigrant * as.numeric(race_group == "black"),
        issue_immigrant * as.numeric(race_group == "asian"),
        issue_immigrant * as.numeric(race_group == "mixed-other")
      )
      sum(coefs * x)
    },
    std_error = {
      x <- c(
        1,
        issue_immigrant,
        as.numeric(race_group == "black"),
        as.numeric(race_group == "asian"),
        as.numeric(race_group == "mixed-other"),
        issue_immigrant * as.numeric(race_group == "black"),
        issue_immigrant * as.numeric(race_group == "asian"),
        issue_immigrant * as.numeric(race_group == "mixed-other")
      )
      sqrt(t(x) %*% vcov_mat %*% x)
    },
    ci_lower = estimate - 1.96 * std_error,
    ci_upper = estimate + 1.96 * std_error
  ) %>%
  ungroup()

# Convert to factor for plotting
pred_df$issue_immigrant <- factor(pred_df$issue_immigrant, labels = c("Not Immigration", "Immigration"))

# Plot
library(ggplot2)
ggplot(pred_df, aes(x = issue_immigrant, y = estimate, color = race_group, group = race_group)) +
  geom_point(position = position_dodge(0.3), size = 3) +
  geom_line(position = position_dodge(0.3)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, position = position_dodge(0.3)) +
  labs(
    title = "Predicted Effects by Race Group and Immigration Content",
    x = "Content Type",
    y = "Predicted Effect",
    color = "Race Group"
  ) +
  theme_minimal()



##### 2. blm
meta_fit_race_blm_interaction <- rma.mv(
  yi = estimate,
  V = final_vcov_matrix,
  mods = ~ issue_blm_race * race_group,
  data = lm_estimates_race
)
summary(meta_fit_race_blm_interaction)




# Extract coefficients and variance-covariance matrix
coefs <- coef(meta_fit_race_blm_interaction)
vcov_mat <- vcov(meta_fit_race_blm_interaction)

# Define scenarios to predict
pred_df <- expand.grid(
  issue_blm_race = c(0, 1),
  race_group = c("white", "black", "asian", "mixed-other")
)

# Manually compute predictions and standard errors
pred_df <- pred_df %>%
  rowwise() %>%
  mutate(
    estimate = {
      x <- c(
        1,
        issue_blm_race,
        as.numeric(race_group == "black"),
        as.numeric(race_group == "asian"),
        as.numeric(race_group == "mixed-other"),
        issue_blm_race * as.numeric(race_group == "black"),
        issue_blm_race * as.numeric(race_group == "asian"),
        issue_blm_race * as.numeric(race_group == "mixed-other")
      )
      sum(coefs * x)
    },
    std_error = {
      x <- c(
        1,
        issue_blm_race,
        as.numeric(race_group == "black"),
        as.numeric(race_group == "asian"),
        as.numeric(race_group == "mixed-other"),
        issue_blm_race * as.numeric(race_group == "black"),
        issue_blm_race * as.numeric(race_group == "asian"),
        issue_blm_race * as.numeric(race_group == "mixed-other")
      )
      sqrt(t(x) %*% vcov_mat %*% x)
    },
    ci_lower = estimate - 1.96 * std_error,
    ci_upper = estimate + 1.96 * std_error
  ) %>%
  ungroup()

# Convert to factor for plotting
pred_df$issue_blm_race <- factor(pred_df$issue_blm_race, labels = c("No BLM", "BLM"))

# Plot
library(ggplot2)
ggplot(pred_df, aes(x = issue_blm_race, y = estimate, color = race_group, group = race_group)) +
  geom_point(position = position_dodge(0.3), size = 3) +
  geom_line(position = position_dodge(0.3)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, position = position_dodge(0.3)) +
  labs(
    title = "Predicted Effects by Race Group and Immigration Content",
    x = "Content Type",
    y = "Predicted Effect",
    color = "Race Group"
  ) +
  theme_minimal()


##### 3. forignp
meta_fit_race_forp_interaction <- rma.mv(
  yi = estimate,
  V = final_vcov_matrix,
  mods = ~ issue_foreign_p * race_group,
  data = lm_estimates_race
)
summary(meta_fit_race_forp_interaction)




# Extract coefficients and variance-covariance matrix
coefs <- coef(meta_fit_race_forp_interaction)
vcov_mat <- vcov(meta_fit_race_forp_interaction)

# Define scenarios to predict
pred_df <- expand.grid(
  issue_foreign_p = c(0, 1),
  race_group = c("white", "black", "asian", "mixed-other")
)

# Manually compute predictions and standard errors
pred_df <- pred_df %>%
  rowwise() %>%
  mutate(
    estimate = {
      x <- c(
        1,
        issue_foreign_p,
        as.numeric(race_group == "black"),
        as.numeric(race_group == "asian"),
        as.numeric(race_group == "mixed-other"),
        issue_foreign_p * as.numeric(race_group == "black"),
        issue_foreign_p * as.numeric(race_group == "asian"),
        issue_foreign_p * as.numeric(race_group == "mixed-other")
      )
      sum(coefs * x)
    },
    std_error = {
      x <- c(
        1,
        issue_foreign_p,
        as.numeric(race_group == "black"),
        as.numeric(race_group == "asian"),
        as.numeric(race_group == "mixed-other"),
        issue_foreign_p * as.numeric(race_group == "black"),
        issue_foreign_p * as.numeric(race_group == "asian"),
        issue_foreign_p * as.numeric(race_group == "mixed-other")
      )
      sqrt(t(x) %*% vcov_mat %*% x)
    },
    ci_lower = estimate - 1.96 * std_error,
    ci_upper = estimate + 1.96 * std_error
  ) %>%
  ungroup()

# Convert to factor for plotting
pred_df$issue_foreign_p <- factor(pred_df$issue_foreign_p, labels = c("no foriegn p", "foriegn p))


library(ggplot2)
ggplot(pred_df, aes(x = issue_foreign_p, y = estimate, color = race_group, group = race_group)) +
  geom_point(position = position_dodge(0.3), size = 3) +
  geom_line(position = position_dodge(0.3)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, position = position_dodge(0.3)) +
  labs(
    title = "Predicted Effects by Race Group and Immigration Content",
    x = "Content Type",
    y = "Predicted Effect",
    color = "Race Group"
  ) +
  theme_minimal()






