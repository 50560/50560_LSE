#This script was used to conduct analysis on the persuaisve effects of ads by eductaion level, using three binary cut offs for eductaion (H3).

#load in packages 
library(tidyverse)
library(metafor)
library(broom)
library(dplyr)
library(purrr)
library(broom)
library(ggplot2)
library(metafor)
library(Matrix)


# visualise education levels
ggplot(df_responses2020, aes(x = education)) +
  geom_bar(fill = "steelblue") +
  labs(
    title = "Education Distribution",
    x = "Education Level",
    y = "Count"
  ) +
  theme_minimal()


# Read the data in
setwd("/Users/x/Desktop/LSE/diss/replication_archive/output/processed_data")
df_responses2020 <- readRDS("responses.rds") %>% filter(dataset_year == "2020")
df_tags2020 <- readRDS("tagging_2020.rds")

list_study_ids <- df_responses2020$study_id %>% unique


# creating a numeric based education subset 
df_responses2020$education_numeric <- recode(df_responses2020$education,
                                             "school" = 1, 
                                             "highschool" = 2, 
                                             "some-college" = 3, 
                                             "college" = 4, 
                                             "postgrad" = 5, 
                                             .default = NA_real_)
# model 1: school cut off
df_responses2020$education_binary <- ifelse(is.na(df_responses2020$education_numeric), NA, df_responses2020$education_numeric >= 2)


df_filtered <- df_responses2020 %>%
  filter(!is.na(education_numeric))  
# model 1: using school completion as the cut off 
# Create two subsets
df_low_edu <- df_filtered %>%
  filter(education_numeric < 2)

df_high_edu <- df_filtered %>%
  filter(education_numeric >= 2)

# 1- run analysis for the higher eductaion group
list_study_ids_high_edu <- df_high_edu$study_id %>% unique

df_sample_high_edu <-
  df_high_edu %>% 
  filter(study_id %in% list_study_ids_high_edu) %>% 
  select(study_id, dataset_year, treat, content_id, favorability, votechoice)

df_sample_combined_fav_choice_high_edu <- df_sample_high_edu %>%
  mutate(
    combined_outcome = case_when(
      !is.na(favorability) & !is.na(votechoice) ~ (favorability + votechoice) / 2,  # Average if both exist
      !is.na(favorability) ~ favorability,  
      !is.na(votechoice) ~ votechoice,  
      TRUE ~ NA_real_  
    )
  )

out_loop_high_edu <- map(list_study_ids_high_edu, function(.x) {
  df_filtered <- df_sample_combined_fav_choice_high_edu %>% filter(study_id == .x)
  if (nrow(df_filtered) == 0) {
    return(NULL)
  }
  

  lm_fit <- lm(combined_outcome ~ factor(content_id), data = df_filtered)
  tidied_estimates <- tidy(lm_fit) %>% filter(term != "(Intercept)")
  
  vcov_matrix <- vcov(lm_fit)
  vcov_matrix <- vcov_matrix[rownames(vcov_matrix) != "(Intercept)", colnames(vcov_matrix) != "(Intercept)"]
  list("tidied_estimates" = tidied_estimates, "vcov_matrix" = vcov_matrix)
})

out_loop_high_edu <- compact(out_loop_high_edu)


tidied_estimates_high_edu <- map_dfr(out_loop_high_edu, function(x) x$tidied_estimates)
giant_vcov_matrix_high_edu <- map(out_loop_high_edu, function(.x) .x$vcov_matrix) %>% bdiag()

# Checks for correct binding
stopifnot(isSymmetric(giant_vcov_matrix_high_edu))
stopifnot(identical(giant_vcov_matrix_high_edu %>% diag %>% sqrt %>% unname %>% round(10), tidied_estimates_high_edu$std.error %>% round(10)))

# check for 1 study 
out_loop_high_edu[[1]]$tidied_estimates
out_loop_high_edu[[1]]$vcov_matrix

tidied_estimates_high_edu <- map_dfr(out_loop_high_edu, function(x) x$tidied_estimates)

#2. repeat for the lower education group
list_study_ids_low_edu <- df_low_edu$study_id %>% unique


df_sample_low_edu <-
  df_low_edu %>% 
  filter(study_id %in% list_study_ids_low_edu) %>% 
  select(study_id, dataset_year, treat, content_id, favorability, votechoice)


df_sample_combined_fav_choice_low_edu <- df_sample_low_edu %>%
  mutate(
    combined_outcome = case_when(
      !is.na(favorability) & !is.na(votechoice) ~ (favorability + votechoice) / 2,  
      !is.na(favorability) ~ favorability,  
      !is.na(votechoice) ~ votechoice,  
      TRUE ~ NA_real_  
    )
  )


out_loop_low_edu <- map(list_study_ids_low_edu, function(.x) {
  df_filtered <- df_sample_combined_fav_choice_low_edu %>% filter(study_id == .x)
  

  if (nrow(df_filtered) == 0) {
    return(NULL)
  }
  
 
  lm_fit <- lm(combined_outcome ~ factor(content_id), data = df_filtered)
  tidied_estimates <- tidy(lm_fit) %>% filter(term != "(Intercept)")
  vcov_matrix <- vcov(lm_fit)
  vcov_matrix <- vcov_matrix[rownames(vcov_matrix) != "(Intercept)", colnames(vcov_matrix) != "(Intercept)"]

  list("tidied_estimates" = tidied_estimates, "vcov_matrix" = vcov_matrix)
})

out_loop_low_edu <- compact(out_loop_low_edu)

# check the first study ID
out_loop_low_edu[[1]]$tidied_estimates
out_loop_low_edu[[1]]$vcov_matrix

tidied_estimates_low_edu <- map_dfr(out_loop_low_edu, function(x) x$tidied_estimates)

giant_vcov_matrix_low_edu <-
  map(out_loop_low_edu,
      function(.x) {
        .x$vcov_matrix
      }) %>% 
  bdiag()
# sanity checks
stopifnot(isSymmetric(giant_vcov_matrix_low_edu))
stopifnot(identical(giant_vcov_matrix_low_edu %>% diag %>% sqrt %>% unname %>% round(10), tidied_estimates_low_edu$std.error %>% round(10)))


# Combine everything 
final_giant_vcov_matrix <- bdiag(giant_vcov_matrix_low_edu, giant_vcov_matrix_high_edu)
# Ensure symmetry
stopifnot(isSymmetric(final_giant_vcov_matrix))
computed_se <- final_giant_vcov_matrix %>% diag() %>% sqrt() %>% unname() %>% round(10)
expected_se <- c(tidied_estimates_low_edu$std.error, tidied_estimates_high_edu$std.error) %>% round(10)
stopifnot(identical(computed_se, expected_se))


#  meta-regressions by education level - model 1
tidied_estimates_high_edu <- tidied_estimates_high_edu %>%
  mutate(education_group = "high")

tidied_estimates_low_edu <- tidied_estimates_low_edu %>%
  mutate(education_group = "low")

# Combine the estimates from both education groups
lm_estimates_edu <- bind_rows(tidied_estimates_low_edu,tidied_estimates_high_edu) %>%
  mutate(content_id = gsub("factor\\(content_id\\)", "", term)) %>%  # Clean term names
  left_join(df_tags2020, by = "content_id")  # Merge with tags dataset

meta_fit_edu_immigration_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_immigrant*education_group,  
  data = lm_estimates_edu
)
summary(meta_fit_edu_immigration_interaction)

meta_fit_edu_blm_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_blm_race*education_group, 
  data = lm_estimates_edu
)
summary(meta_fit_edu_blm_interaction)


meta_fit_edu_forignp_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_foreign_p*education_group, 
  data = lm_estimates_edu
)
summary(meta_fit_edu_forignp_interaction)


meta_fit_edu_dec_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_decency*education_group,  
  data = lm_estimates_edu
)
summary(meta_fit_edu_dec_interaction)

meta_fit_disgust <- rma.mv(yi = estimate,   
                           V = final_giant_vcov_matrix,      
                           mods = ~ emotion_disgust*education_group, 
                           data = lm_estimates_edu)
summary(meta_fit_disgust)

meta_fit_fear <- rma.mv(yi = estimate,   
                        V = final_giant_vcov_matrix,      
                        mods = ~ emotion_fear*education_group,  
                        data = lm_estimates_edu)
summary(meta_fit_fear)

lm_estimates_edu$immigrationissue_combined <- lm_estimates_edu$issue_blm_race + lm_estimates_edu$issue_foreign_p + lm_estimates_edu$issue_immigrant

meta_fit_combined_immigration_issue <- rma.mv(yi = estimate,   
                                              V = final_giant_vcov_matrix,      
                                              mods = ~ immigrationissue_combined*education_group,  
                                              data = lm_estimates_edu)
summary(meta_fit_combined_immigration_issue)


#immigration and foreign policy
lm_estimates_edu$immigrationissue_combined_foreign_immi <- lm_estimates_edu$issue_immigrant +lm_estimates_edu$issue_foreign_p

meta_fit_combined_immigration_foreignp <- rma.mv(yi = estimate,   
                                                 V = final_giant_vcov_matrix,      
                                                 mods = ~ immigrationissue_combined_foreign_immi*education_group,  
                                                 data = lm_estimates_edu)
summary(meta_fit_combined_immigration_foreignp)




#model 2: when eductaion is set at high-school level or below 

# reset data frame by re-reading data in
setwd("/Users/x/Desktop/LSE/diss/replication_archive/output/processed_data")
df_responses2020 <- readRDS("responses.rds") %>% filter(dataset_year == "2020")
df_tags2020 <- readRDS("tagging_2020.rds")

list_study_ids <- df_responses2020$study_id %>% unique


#1. create the eductaion subset 
df_responses2020$education_numeric <- recode(df_responses2020$education,
                                             "school" = 1, 
                                             "highschool" = 2, 
                                             "some-college" = 3, 
                                             "college" = 4, 
                                             "postgrad" = 5, 
                                             .default = NA_real_)

df_responses2020$education_binary <- ifelse(is.na(df_responses2020$education_numeric), NA, df_responses2020$education_numeric >= 2)


df_filtered <- df_responses2020 %>%
  filter(!is.na(education_numeric))  # checks and removes NA values 

# Creating two subsets: at college level
df_low_edu <- df_filtered %>%
  filter(education_numeric < 3)

df_high_edu <- df_filtered %>%
  filter(education_numeric >= 3)

# step 1 - run analysis on the higher eductaion group
list_study_ids_high_edu <- df_high_edu$study_id %>% unique


df_sample_high_edu <-
  df_high_edu %>% 
  filter(study_id %in% list_study_ids_high_edu) %>% 
  select(study_id, dataset_year, treat, content_id, favorability, votechoice)



df_sample_combined_fav_choice_high_edu <- df_sample_high_edu %>%
  mutate(
    combined_outcome = case_when(
      !is.na(favorability) & !is.na(votechoice) ~ (favorability + votechoice) / 2,  
      !is.na(favorability) ~ favorability,  
      !is.na(votechoice) ~ votechoice,  
      TRUE ~ NA_real_  
    )
  )


out_loop_high_edu <- map(list_study_ids_high_edu, function(.x) {
  df_filtered <- df_sample_combined_fav_choice_high_edu %>% filter(study_id == .x)
  
  if (nrow(df_filtered) == 0) {
    return(NULL)
  }
  
  lm_fit <- lm(combined_outcome ~ factor(content_id), data = df_filtered)

  tidied_estimates <- tidy(lm_fit) %>% filter(term != "(Intercept)")
  
  vcov_matrix <- vcov(lm_fit)
  vcov_matrix <- vcov_matrix[rownames(vcov_matrix) != "(Intercept)", colnames(vcov_matrix) != "(Intercept)"]
   
  list("tidied_estimates" = tidied_estimates, "vcov_matrix" = vcov_matrix)
})

out_loop_high_edu <- compact(out_loop_high_edu)


tidied_estimates_high_edu <- map_dfr(out_loop_high_edu, function(x) x$tidied_estimates)

# Combine the variance-covariance matrices
giant_vcov_matrix_high_edu <- map(out_loop_high_edu, function(.x) .x$vcov_matrix) %>% bdiag()

# Sanity checks
stopifnot(isSymmetric(giant_vcov_matrix_high_edu))
stopifnot(identical(giant_vcov_matrix_high_edu %>% diag %>% sqrt %>% unname %>% round(10), tidied_estimates_high_edu$std.error %>% round(10)))

# check for 1 study 
out_loop_high_edu[[1]]$tidied_estimates
out_loop_high_edu[[1]]$vcov_matrix



#2. repeating the lower education group
list_study_ids_low_edu <- df_low_edu$study_id %>% unique

                            
df_sample_low_edu <-
  df_low_edu %>% 
  filter(study_id %in% list_study_ids_low_edu) %>% 
  select(study_id, dataset_year, treat, content_id, favorability, votechoice)


df_sample_combined_fav_choice_low_edu <- df_sample_low_edu %>%
  mutate(
    combined_outcome = case_when(
      !is.na(favorability) & !is.na(votechoice) ~ (favorability + votechoice) / 2,  
      !is.na(favorability) ~ favorability,  
      !is.na(votechoice) ~ votechoice,  
      TRUE ~ NA_real_  
    )
  )

out_loop_low_edu <- map(list_study_ids_low_edu, function(.x) {
  df_filtered <- df_sample_combined_fav_choice_low_edu %>% filter(study_id == .x)
  
  
  if (nrow(df_filtered) == 0) {
    return(NULL)
  }
  
  lm_fit <- lm(combined_outcome ~ factor(content_id), data = df_filtered)
  
  tidied_estimates <- tidy(lm_fit) %>% filter(term != "(Intercept)")
  
  vcov_matrix <- vcov(lm_fit)
  vcov_matrix <- vcov_matrix[rownames(vcov_matrix) != "(Intercept)", colnames(vcov_matrix) != "(Intercept)"]
  
  list("tidied_estimates" = tidied_estimates, "vcov_matrix" = vcov_matrix)
})

out_loop_low_edu <- compact(out_loop_low_edu)
out_loop_low_edu[[1]]$tidied_estimates
out_loop_low_edu[[1]]$vcov_matrix

tidied_estimates_low_edu <- map_dfr(out_loop_low_edu, function(x) x$tidied_estimates)

giant_vcov_matrix_low_edu <-
  map(out_loop_low_edu,
      function(.x) {
        .x$vcov_matrix
      }) %>% 
  bdiag()
#checks
stopifnot(isSymmetric(giant_vcov_matrix_low_edu))
stopifnot(identical(giant_vcov_matrix_low_edu %>% diag %>% sqrt %>% unname %>% round(10), tidied_estimates_low_edu$std.error %>% round(10)))


# final merger of both data sets and check for correct binding
final_giant_vcov_matrix <- bdiag(giant_vcov_matrix_low_edu, giant_vcov_matrix_high_edu)

stopifnot(isSymmetric(final_giant_vcov_matrix))

computed_se <- final_giant_vcov_matrix %>% diag() %>% sqrt() %>% unname() %>% round(10)
expected_se <- c(tidied_estimates_low_edu$std.error, tidied_estimates_high_edu$std.error) %>% round(10)
stopifnot(identical(computed_se, expected_se))


#3. meta-regressions with education level as moderator
tidied_estimates_high_edu <- tidied_estimates_high_edu %>%
  mutate(education_group = "high")

tidied_estimates_low_edu <- tidied_estimates_low_edu %>%
  mutate(education_group = "low")

# Combine the estimates from both education groups
lm_estimates_edu <- bind_rows(tidied_estimates_low_edu,tidied_estimates_high_edu) %>%
  mutate(content_id = gsub("factor\\(content_id\\)", "", term)) %>%  # Clean term names
  left_join(df_tags2020, by = "content_id")  # Merge with tags dataset

meta_fit_edu_immigration_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_immigrant*education_group,  # Interaction term
  data = lm_estimates_edu
)
summary(meta_fit_edu_immigration_interaction)

meta_fit_edu_blm_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_blm_race*education_group,  # Interaction term
  data = lm_estimates_edu
)
summary(meta_fit_edu_blm_interaction)



meta_fit_edu_forignp_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_foreign_p*education_group, 
  data = lm_estimates_edu
)
summary(meta_fit_edu_forignp_interaction)


meta_fit_edu_dec_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_decency*education_group,  
  data = lm_estimates_edu
)
summary(meta_fit_edu_dec_interaction)

meta_fit_disgust <- rma.mv(yi = estimate,   
                           V = final_giant_vcov_matrix,      
                           mods = ~ emotion_disgust*education_group, 
                           data = lm_estimates_edu)
summary(meta_fit_disgust)



meta_fit_fear <- rma.mv(yi = estimate,   
                        V = final_giant_vcov_matrix,      
                        mods = ~ emotion_fear*education_group,  
                        data = lm_estimates_edu)
summary(meta_fit_fear)
#combined primary 
lm_estimates_edu$immigrationissue_combined <- lm_estimates_edu$issue_blm_race + lm_estimates_edu$issue_foreign_p + lm_estimates_edu$issue_immigrant

meta_fit_combined_immigration_issue <- rma.mv(yi = estimate,   
                                              V = final_giant_vcov_matrix,      
                                              mods = ~ immigrationissue_combined*education_group,  
                                              data = lm_estimates_edu)
summary(meta_fit_combined_immigration_issue)


#immigration and foreign policy - national secuirty
lm_estimates_edu$immigrationissue_combined_foreign_immi <- lm_estimates_edu$issue_immigrant +lm_estimates_edu$issue_foreign_p

meta_fit_combined_immigration_foreignp <- rma.mv(yi = estimate,   
                                                 V = final_giant_vcov_matrix,      
                                                 mods = ~ immigrationissue_combined_foreign_immi*education_group,  
                                                 data = lm_estimates_edu)
summary(meta_fit_combined_immigration_foreignp)



##model 3: when eductaion level is opperationalised as finnished college level or below 

# re-read data in 
setwd("/Users/x/Desktop/LSE/diss/replication_archive/output/processed_data")
df_responses2020 <- readRDS("responses.rds") %>% filter(dataset_year == "2020")
df_tags2020 <- readRDS("tagging_2020.rds")

list_study_ids <- df_responses2020$study_id %>% unique


# creating the eductaion levels numerically 
df_responses2020$education_numeric <- recode(df_responses2020$education,
                                             "school" = 1, 
                                             "highschool" = 2, 
                                             "some-college" = 3, 
                                             "college" = 4, 
                                             "postgrad" = 5, 
                                             .default = NA_real_)

df_responses2020$education_binary <- ifelse(is.na(df_responses2020$education_numeric), NA, df_responses2020$education_numeric >= 2)

df_filtered <- df_responses2020 %>%
  filter(!is.na(education_numeric))  # Removes NA values in education

# Create two subsets: for finnished college or not 
df_low_edu <- df_filtered %>%
  filter(education_numeric < 4)
# starting with the high eductaion group
df_high_edu <- df_filtered %>%
  filter(education_numeric >= 4)
list_study_ids_high_edu <- df_high_edu$study_id %>% unique


df_sample_high_edu <-
  df_high_edu %>% 
  filter(study_id %in% list_study_ids_high_edu) %>% 
  select(study_id, dataset_year, treat, content_id, favorability, votechoice)

#create combined matrix 
df_sample_combined_fav_choice_high_edu <- df_sample_high_edu %>%
  mutate(
    combined_outcome = case_when(
      !is.na(favorability) & !is.na(votechoice) ~ (favorability + votechoice) / 2,  
      !is.na(favorability) ~ favorability,  
      !is.na(votechoice) ~ votechoice,  
      TRUE ~ NA_real_  
    )
  )

out_loop_high_edu <- map(list_study_ids_high_edu, function(.x) {
  df_filtered <- df_sample_combined_fav_choice_high_edu %>% filter(study_id == .x)
  
  if (nrow(df_filtered) == 0) {
    return(NULL)
  }
  
  
  lm_fit <- lm(combined_outcome ~ factor(content_id), data = df_filtered)
  tidied_estimates <- tidy(lm_fit) %>% filter(term != "(Intercept)")
  
  vcov_matrix <- vcov(lm_fit)
  vcov_matrix <- vcov_matrix[rownames(vcov_matrix) != "(Intercept)", colnames(vcov_matrix) != "(Intercept)"]
  
  list("tidied_estimates" = tidied_estimates, "vcov_matrix" = vcov_matrix)
})
out_loop_high_edu <- compact(out_loop_high_edu)
tidied_estimates_high_edu <- map_dfr(out_loop_high_edu, function(x) x$tidied_estimates)

giant_vcov_matrix_high_edu <- map(out_loop_high_edu, function(.x) .x$vcov_matrix) %>% bdiag()

# Sanity checks
stopifnot(isSymmetric(giant_vcov_matrix_high_edu))
stopifnot(identical(giant_vcov_matrix_high_edu %>% diag %>% sqrt %>% unname %>% round(10), tidied_estimates_high_edu$std.error %>% round(10)))

# check for 1 study 
out_loop_high_edu[[1]]$tidied_estimates
out_loop_high_edu[[1]]$vcov_matrix


#2. repeat for the lower education group
list_study_ids_low_edu <- df_low_edu$study_id %>% unique


df_sample_low_edu <-
  df_low_edu %>% 
  filter(study_id %in% list_study_ids_low_edu) %>% 
  select(study_id, dataset_year, treat, content_id, favorability, votechoice)

df_sample_combined_fav_choice_low_edu <- df_sample_low_edu %>%
  mutate(
    combined_outcome = case_when(
      !is.na(favorability) & !is.na(votechoice) ~ (favorability + votechoice) / 2,  
      !is.na(favorability) ~ favorability,  
      !is.na(votechoice) ~ votechoice,  
      TRUE ~ NA_real_  
    )
  )

out_loop_low_edu <- map(list_study_ids_low_edu, function(.x) {
  df_filtered <- df_sample_combined_fav_choice_low_edu %>% filter(study_id == .x)
  
  if (nrow(df_filtered) == 0) {
    return(NULL)
  }
  

  lm_fit <- lm(combined_outcome ~ factor(content_id), data = df_filtered)
  tidied_estimates <- tidy(lm_fit) %>% filter(term != "(Intercept)")
  vcov_matrix <- vcov(lm_fit)
  vcov_matrix <- vcov_matrix[rownames(vcov_matrix) != "(Intercept)", colnames(vcov_matrix) != "(Intercept)"]
  list("tidied_estimates" = tidied_estimates, "vcov_matrix" = vcov_matrix)
})


out_loop_low_edu <- compact(out_loop_low_edu)

# check
out_loop_low_edu[[1]]$tidied_estimates
out_loop_low_edu[[1]]$vcov_matrix

tidied_estimates_low_edu <- map_dfr(out_loop_low_edu, function(x) x$tidied_estimates)

giant_vcov_matrix_low_edu <-
  map(out_loop_low_edu,
      function(.x) {
        .x$vcov_matrix
      }) %>% 
  bdiag()
# Sanity check
stopifnot(isSymmetric(giant_vcov_matrix_low_edu))
stopifnot(identical(giant_vcov_matrix_low_edu %>% diag %>% sqrt %>% unname %>% round(10), tidied_estimates_low_edu$std.error %>% round(10)))


# Combine the covariance matrices and check
final_giant_vcov_matrix <- bdiag(giant_vcov_matrix_low_edu, giant_vcov_matrix_high_edu)
stopifnot(isSymmetric(final_giant_vcov_matrix))
computed_se <- final_giant_vcov_matrix %>% diag() %>% sqrt() %>% unname() %>% round(10)
expected_se <- c(tidied_estimates_low_edu$std.error, tidied_estimates_high_edu$std.error) %>% round(10)
stopifnot(identical(computed_se, expected_se))


# meta-regressions regressions by education level 

tidied_estimates_high_edu <- tidied_estimates_high_edu %>%
  mutate(education_group = "high")

tidied_estimates_low_edu <- tidied_estimates_low_edu %>%
  mutate(education_group = "low")

# Combine the estimates from both education groups
lm_estimates_edu <- bind_rows(tidied_estimates_low_edu,tidied_estimates_high_edu) %>%
  mutate(content_id = gsub("factor\\(content_id\\)", "", term)) %>%  # Clean term names
  left_join(df_tags2020, by = "content_id")  # Merge with tags dataset

meta_fit_edu_immigration_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_immigrant*education_group,  # Interaction term
  data = lm_estimates_edu
)
summary(meta_fit_edu_immigration_interaction)

meta_fit_edu_blm_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_blm_race*education_group,  # Interaction term
  data = lm_estimates_edu
)
summary(meta_fit_edu_blm_interaction)



meta_fit_edu_forignp_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_foreign_p*education_group, 
  data = lm_estimates_edu
)
summary(meta_fit_edu_forignp_interaction)


meta_fit_edu_dec_interaction <- rma.mv(
  yi = estimate,         
  V = final_giant_vcov_matrix,  
  mods = ~ issue_decency*education_group,  
  data = lm_estimates_edu
)
summary(meta_fit_edu_dec_interaction)

meta_fit_disgust <- rma.mv(yi = estimate,   
                           V = final_giant_vcov_matrix,      
                           mods = ~ emotion_disgust*education_group, 
                           data = lm_estimates_edu)
summary(meta_fit_disgust)



meta_fit_fear <- rma.mv(yi = estimate,   
                        V = final_giant_vcov_matrix,      
                        mods = ~ emotion_fear*education_group,  
                        data = lm_estimates_edu)
summary(meta_fit_fear)
                                    
#combined primary
lm_estimates_edu$immigrationissue_combined <- lm_estimates_edu$issue_blm_race + lm_estimates_edu$issue_foreign_p + lm_estimates_edu$issue_immigrant

meta_fit_combined_immigration_issue <- rma.mv(yi = estimate,   
                                              V = final_giant_vcov_matrix,      
                                              mods = ~ immigrationissue_combined*education_group,  
                                              data = lm_estimates_edu)
summary(meta_fit_combined_immigration_issue)


#immigration and foreign policy - national security 
lm_estimates_edu$immigrationissue_combined_foreign_immi <- lm_estimates_edu$issue_immigrant +lm_estimates_edu$issue_foreign_p

meta_fit_combined_immigration_foreignp <- rma.mv(yi = estimate,   
                                                 V = final_giant_vcov_matrix,      
                                                 mods = ~ immigrationissue_combined_foreign_immi*education_group,  
                                                 data = lm_estimates_edu)
summary(meta_fit_combined_immigration_foreignp)
